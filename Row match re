import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
import joblib

# Load the saved model and vectorizer
clf = joblib.load('regex_classifier_model.pkl')
vectorizer = joblib.load('tfidf_vectorizer.pkl')

# Path to the new data file
new_data_file_path = 'new_data.dat'

# Function to create regex pattern from value
def create_regex_pattern(value):
    # Check if it's an integer
    if value.isdigit():
        return r'\b\d+\b'
    
    # Check if it's a float
    try:
        float(value)
        return r'\b\d+\.\d+\b'
    except ValueError:
        pass
    
    # Check if it's a date
    date_patterns = [
        r'\b\d{4}-\d{2}-\d{2}\b',  # YYYY-MM-DD
        r'\b\d{2}/\d{2}/\d{4}\b',  # MM/DD/YYYY
        r'\b\d{4}/\d{2}/\d{2}\b',  # YYYY/MM/DD
        r'\b\d{2}-\d{2}-\d{4}\b',  # DD-MM-YYYY
        r'\b\d{4}\d{2}\d{2}\b',    # YYYYMMDD
        r'\b\d{2}:\d{2}:\d{2}\b'   # HH:MM:SS
    ]
    for date_pattern in date_patterns:
        try:
            datetime.strptime(value, date_pattern)
            return date_pattern
        except ValueError:
            continue
    
    # If none of the above, assume it's text
    return re.escape(value)  # Escape special characters for text

# Read and process the new data file
with open(new_data_file_path, 'r') as file:
    new_data = [line.strip() for line in file if line.strip()]

# Convert the new data into regex patterns
regex_patterns = [create_regex_pattern(value) for value in new_data]

# Transform the regex patterns using the loaded vectorizer
X_new = vectorizer.transform(regex_patterns)

# Predict using the loaded model
predictions = clf.predict(X_new)

# Convert numeric predictions back to original labels
reverse_label_mapping = {v: k for k, v in joblib.load('label_mapping.pkl').items()}
predicted_labels = [reverse_label_mapping[pred] for pred in predictions]

# Output the predictions
for value, label in zip(new_data, predicted_labels):
    print(f"Value: {value} - Predicted Label: {label}")
