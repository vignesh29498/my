import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import make_pipeline
import os
import joblib

def train_model(label_file):
    labels = pd.read_csv(label_file)

    for idx, row in labels.iterrows():
        handoff_file = row['Handoff_File']
        icd_file = row['ICD_File']
        handoff_columns = row['Handoff_Columns'].split()
        icd_columns = row['ICD_Columns'].split()
        
        # Load Handoff data
        handoff_data = pd.read_csv(f'AIML/Handoff/{handoff_file}', usecols=handoff_columns)
        handoff_data.fillna('', inplace=True)
        
        # Load ICD data
        icd_data = pd.read_csv(f'AIML/ICD/{icd_file}', usecols=icd_columns)
        icd_data.fillna('', inplace=True)

        # Ensure Text_ID columns are of the same type
        handoff_data['Text_ID'] = handoff_data['Text_ID'].astype(str)
        icd_data['Text_ID'] = icd_data['Text_ID'].astype(str)

        # Combine the text columns
        handoff_data['combined_text'] = handoff_data.apply(lambda x: ' '.join(x.astype(str)), axis=1)
        
        # Create a combined DataFrame for training
        combined_data = handoff_data[['Text_ID', 'combined_text']].merge(icd_data, on='Text_ID')

        # Prepare the training data
        X = combined_data['combined_text']
        y = combined_data.drop(columns=['Text_ID', 'combined_text'])
        
        for column in y.columns:
            model = make_pipeline(TfidfVectorizer(), LogisticRegression(max_iter=1000))
            model.fit(X, y[column])
            
            # Save the model
            model_filename = f'model_{handoff_file.split(".")[0]}_{column}.pkl'
            joblib.dump(model, model_filename)
            print(f'Saved model to {model_filename}')
    
def predict_meanings(label_file, new_raw_file, output_file):
    labels = pd.read_csv(label_file)
    handoff_columns = None
    icd_file = None
    icd_columns = None

    for idx, row in labels.iterrows():
        if row['Handoff_File'] == os.path.basename(new_raw_file):
            handoff_columns = row['Handoff_Columns'].split()
            icd_file = row['ICD_File']
            icd_columns = row['ICD_Columns'].split()
            break
    
    if handoff_columns is None:
        raise ValueError("No matching entry found in the label file for the provided new_raw_file.")
    
    new_data = pd.read_csv(new_raw_file, usecols=handoff_columns)
    new_data.fillna('', inplace=True)
    new_data['combined_text'] = new_data.apply(lambda x: ' '.join(x.astype(str)), axis=1)
    
    predictions = pd.DataFrame(new_data['Text_ID'])
    
    for column in icd_columns[1:]:
        model_filename = f'model_{os.path.basename(new_raw_file).split(".")[0]}_{column}.pkl'
        if not os.path.exists(model_filename):
            raise ValueError(f"Model file {model_filename} does not exist.")
        
        model = joblib.load(model_filename)
        predictions[column] = model.predict(new_data['combined_text'])
    
    icd_data = pd.read_csv(f'AIML/ICD/{icd_file}', usecols=icd_columns)
    icd_data = icd_data[icd_columns]  # Keep only the relevant columns

    # Ensure Text_ID columns are of the same type
    predictions['Text_ID'] = predictions['Text_ID'].astype(str)
    icd_data['Text_ID'] = icd_data['Text_ID'].astype(str)

    result = predictions.merge(icd_data, on='Text_ID')
    
    result.to_csv(output_file, index=False)
    print(f'Saved predictions to {output_file}')

# Example usage
# train_model('label_file.csv')
# predict_meanings('label_file.csv', 'AIML/Handoff/handoff_1.csv', 'predicted_output.csv')
