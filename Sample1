import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
import joblib
import re

# Read the CSV file
file_path = 'your_training_data.csv'  # Replace with your CSV file path
df = pd.read_csv(file_path)

# Priority columns
priority_columns = ['Description', 'Keywords']

# Combine priority columns into a single text column for training
df['Combined'] = df[priority_columns].apply(lambda x: ' '.join(x.astype(str)), axis=1)

# Training the Naive Bayes model
def train_model(df):
    model = make_pipeline(TfidfVectorizer(), MultinomialNB())
    model.fit(df['Combined'], df['ID'])
    return model

# Save the model
def save_model(model, model_path):
    joblib.dump(model, model_path)

# Load the model
def load_model(model_path):
    return joblib.load(model_path)

# Function to preprocess input sentence
def preprocess_input(sentence):
    sentence = re.sub(r'\W+', ' ', sentence).lower()
    return sentence

# Function to predict the ID and Name using the trained model
def predict(model, sentence, df):
    preprocessed_sentence = preprocess_input(sentence)
    predicted_id = model.predict([preprocessed_sentence])[0]
    predicted_name = df.loc[df['ID'] == predicted_id, 'Name'].values[0]
    return predicted_id, predicted_name

# Paths to save the model
model_path = 'naive_bayes_model.pkl'

# Train the model and save it
nb_model = train_model(df)
save_model(nb_model, model_path)

# Load the model
loaded_model = load_model(model_path)

# Sample input sentence
input_sentence = "I need a small versatile tool for everyday use."

# Perform prediction using the loaded model
predicted_id, predicted_name = predict(loaded_model, input_sentence, df)

# Display results
print(f"Predicted ID: {predicted_id}, Predicted Name: {predicted_name}")
