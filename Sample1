import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
import numpy as np

# Load the dataset
data = pd.read_csv('sample_dataset.csv')

# Split dataset into name-related and age-related parts
name_data = data[data['Label'] == 'Name']
age_data = data[data['Label'] == 'Age']

# Prepare name-related data
name_labels = name_data['Name'].values
name_values = name_data['Age'].values.reshape(-1, 1)

# Prepare age-related data
age_labels = age_data['Age'].values
age_values = age_data['Name'].values.reshape(-1, 1)

# Convert labels to categorical
name_label_dict = {label: i for i, label in enumerate(np.unique(name_labels))}
inverse_name_label_dict = {i: label for label, i in name_label_dict.items()}
categorical_name_labels = np.array([name_label_dict[label] for label in name_labels])

age_label_dict = {label: i for i, label in enumerate(np.unique(age_labels))}
inverse_age_label_dict = {i: label for label, i in age_label_dict.items()}
categorical_age_labels = np.array([age_label_dict[label] for label in age_labels])

# Split the data for names
X_train_name, X_val_name, y_train_name, y_val_name = train_test_split(name_values, categorical_name_labels, test_size=0.2, random_state=42)

# Split the data for ages
X_train_age, X_val_age, y_train_age, y_val_age = train_test_split(age_values, categorical_age_labels, test_size=0.2, random_state=42)

# Define and train the model for names
knn_name = KNeighborsClassifier(n_neighbors=3)
knn_name.fit(X_train_name, y_train_name)

# Define and train the model for ages
knn_age = KNeighborsClassifier(n_neighbors=3)
knn_age.fit(X_train_age, y_train_age)

# Function to predict labels for each value in the list
def predict_labels(input_list):
    predictions = []
    for value in input_list:
        if isinstance(value, str):  # Assume string values are names
            value_array = np.array([value]).reshape(-1, 1)
            predicted_label_index = knn_name.predict(value_array)[0]
            predicted_label = inverse_name_label_dict[predicted_label_index]
        else:  # Assume numeric values are ages
            value_array = np.array([value]).reshape(-1, 1)
            predicted_label_index = knn_age.predict(value_array)[0]
            predicted_label = inverse_age_label_dict[predicted_label_index]
        predictions.append(predicted_label)
    return predictions

# Example usage
input_list = ['Dinesh', 76, 'Vignesh', 45]
predicted_labels = predict_labels(input_list)
print(f'The predicted labels are: {predicted_labels}')
