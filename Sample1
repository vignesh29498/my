pip install spacy opencv-python-headless PyMuPDF scikit-image camelot-py pdfplumber
python -m spacy download en_core_web_md


import spacy
from pathlib import Path

# Load pre-trained SpaCy model and save it as a new model
nlp = spacy.load("en_core_web_md")

# Define a function to save the model
def save_spacy_model(nlp, output_dir):
    output_dir = Path(output_dir)
    if not output_dir.exists():
        output_dir.mkdir()
    nlp.to_disk(output_dir)
    print(f"Model saved to {output_dir}")

# Save the model for future use
save_spacy_model(nlp, "./pdf_similarity_model")




import fitz  # PyMuPDF
import cv2
import numpy as np
import camelot
import pdfplumber
from skimage.metrics import structural_similarity as ssim
from PIL import Image
import spacy

# Load the saved model
nlp = spacy.load("./pdf_similarity_model")

def extract_text_from_pdf(pdf_path):
    """Extracts text from each page in a PDF file."""
    text_pages = []
    pdf = fitz.open(pdf_path)
    for page_num in range(pdf.page_count):
        page = pdf[page_num]
        text = page.get_text("text")
        text_pages.append(text)
    pdf.close()
    return text_pages

def calculate_text_similarity(text1, text2):
    """Calculates similarity between two texts using the SpaCy model."""
    doc1 = nlp(text1)
    doc2 = nlp(text2)
    return doc1.similarity(doc2)

def convert_pdf_page_to_image(pdf_path, page_num, dpi=100):
    """Converts a PDF page to an image using PyMuPDF."""
    pdf = fitz.open(pdf_path)
    page = pdf[page_num]
    mat = fitz.Matrix(dpi / 72, dpi / 72)  # set the zoom factor
    pix = page.get_pixmap(matrix=mat)
    pdf.close()
    return Image.frombytes("RGB", [pix.width, pix.height], pix.samples)

def calculate_image_similarity(img1, img2):
    """Calculates structural similarity index (SSIM) between two images."""
    img1_gray = np.array(img1.convert("L"))
    img2_gray = np.array(img2.convert("L"))
    score, diff = ssim(img1_gray, img2_gray, full=True)
    return score

def extract_tables_from_pdf(pdf_path, page_num):
    """Extracts tables from a specific PDF page using Camelot."""
    tables = camelot.read_pdf(pdf_path, pages=str(page_num + 1), flavor='stream')
    table_text = []
    for table in tables:
        table_text.append(table.df.to_string())
    return table_text

def compare_tables(table1, table2):
    """Compares tables from two PDFs by calculating text similarity."""
    if not table1 or not table2:
        return 0  # Return low similarity if one of the pages lacks a table
    return calculate_text_similarity(" ".join(table1), " ".join(table2))

def extract_font_info(pdf_path, page_num):
    """Extracts font information such as style and size from text in a PDF page using pdfplumber."""
    font_info = []
    with pdfplumber.open(pdf_path) as pdf:
        page = pdf.pages[page_num]
        for char in page.chars:
            font_info.append((char['fontname'], char['size']))
    return font_info

def compare_font_info(font_info1, font_info2):
    """Compares font information (style and size) between two pages."""
    return set(font_info1) == set(font_info2)

def compare_pdfs(pdf_path1, pdf_path2, text_threshold=0.8, image_threshold=0.9, table_threshold=0.75):
    """Compares two PDFs by text, image, table, and font similarity page by page."""
    text_pages1 = extract_text_from_pdf(pdf_path1)
    text_pages2 = extract_text_from_pdf(pdf_path2)

    page_count = min(len(text_pages1), len(text_pages2))
    discrepancies = []

    for page_num in range(page_count):
        page_discrepancies = {"page": page_num + 1}

        # Text similarity
        text_similarity = calculate_text_similarity(text_pages1[page_num], text_pages2[page_num])
        if text_similarity < text_threshold:
            page_discrepancies["text_similarity"] = text_similarity

        # Image similarity
        img1 = convert_pdf_page_to_image(pdf_path1, page_num)
        img2 = convert_pdf_page_to_image(pdf_path2, page_num)
        image_similarity = calculate_image_similarity(img1, img2)
        if image_similarity < image_threshold:
            page_discrepancies["image_similarity"] = image_similarity

        # Table similarity
        tables1 = extract_tables_from_pdf(pdf_path1, page_num)
        tables2 = extract_tables_from_pdf(pdf_path2, page_num)
        table_similarity = compare_tables(tables1, tables2)
        if table_similarity < table_threshold:
            page_discrepancies["table_similarity"] = table_similarity

        # Font information
        font_info1 = extract_font_info(pdf_path1, page_num)
        font_info2 = extract_font_info(pdf_path2, page_num)
        if not compare_font_info(font_info1, font_info2):
            page_discrepancies["font_mismatch"] = True

        # Collect discrepancies
        if len(page_discrepancies) > 1:
            discrepancies.append(page_discrepancies)

    return discrepancies

# Usage example
pdf_path1 = "path/to/old_version.pdf"
pdf_path2 = "path/to/new_version.pdf"
discrepancies = compare_pdfs(pdf_path1, pdf_path2)
print("Discrepancies found:", discrepancies)











import fitz  # PyMuPDF for PDF handling
import cv2
import numpy as np
import camelot
import pdfplumber
from skimage.metrics import structural_similarity as ssim
from PIL import Image

def extract_text_from_pdf(pdf_path):
    """Extracts text from each page in a PDF file."""
    text_pages = []
    pdf = fitz.open(pdf_path)
    for page_num in range(pdf.page_count):
        page = pdf[page_num]
        text = page.get_text("text")
        text_pages.append(text)
    pdf.close()
    return text_pages

def convert_pdf_page_to_image(pdf_path, page_num, dpi=100):
    """Converts a PDF page to an image using PyMuPDF."""
    pdf = fitz.open(pdf_path)
    page = pdf[page_num]
    mat = fitz.Matrix(dpi / 72, dpi / 72)  # set the zoom factor
    pix = page.get_pixmap(matrix=mat)
    pdf.close()
    return Image.frombytes("RGB", [pix.width, pix.height], pix.samples)

def calculate_image_similarity(img1, img2):
    """Calculates structural similarity index (SSIM) between two images."""
    img1_gray = np.array(img1.convert("L"))
    img2_gray = np.array(img2.convert("L"))
    score, _ = ssim(img1_gray, img2_gray, full=True)
    return score

def extract_tables_from_pdf(pdf_path, page_num):
    """Extracts tables from a specific PDF page using Camelot."""
    tables = camelot.read_pdf(pdf_path, pages=str(page_num + 1), flavor='stream')
    table_text = []
    for table in tables:
        table_text.append(table.df.to_string())
    return table_text

def compare_tables(table1, table2):
    """Compares tables by checking if the extracted table texts are the same."""
    if not table1 or not table2:
        return 0  # No similarity if one of the pages has no tables
    return 1 if " ".join(table1) == " ".join(table2) else 0

def extract_font_info(pdf_path, page_num):
    """Extracts font information like style and size from text in a PDF page using pdfplumber."""
    font_info = []
    with pdfplumber.open(pdf_path) as pdf:
        page = pdf.pages[page_num]
        for char in page.chars:
            font_info.append((char['fontname'], char['size']))
    return font_info

def compare_font_info(font_info1, font_info2):
    """Compares font information (style and size) between two pages."""
    return set(font_info1) == set(font_info2)

def compare_pdfs(pdf_path1, pdf_path2, text_threshold=0.8, image_threshold=0.9, table_threshold=1):
    """Compares two PDFs by text, image, table, and font similarity, page by page."""
    text_pages1 = extract_text_from_pdf(pdf_path1)
    text_pages2 = extract_text_from_pdf(pdf_path2)

    page_count = min(len(text_pages1), len(text_pages2))
    discrepancies = []

    for page_num in range(page_count):
        page_discrepancies = {"page": page_num + 1}

        # Text similarity
        text_similarity = text_pages1[page_num] == text_pages2[page_num]
        if not text_similarity:
            page_discrepancies["text_mismatch"] = True

        # Image similarity
        img1 = convert_pdf_page_to_image(pdf_path1, page_num)
        img2 = convert_pdf_page_to_image(pdf_path2, page_num)
        image_similarity = calculate_image_similarity(img1, img2)
        if image_similarity < image_threshold:
            page_discrepancies["image_similarity"] = image_similarity

        # Table similarity
        tables1 = extract_tables_from_pdf(pdf_path1, page_num)
        tables2 = extract_tables_from_pdf(pdf_path2, page_num)
        table_similarity = compare_tables(tables1, tables2)
        if table_similarity < table_threshold:
            page_discrepancies["table_mismatch"] = True

        # Font information
        font_info1 = extract_font_info(pdf_path1, page_num)
        font_info2 = extract_font_info(pdf_path2, page_num)
        if not compare_font_info(font_info1, font_info2):
            page_discrepancies["font_mismatch"] = True

        # Collect discrepancies
        if len(page_discrepancies) > 1:
            discrepancies.append(page_discrepancies)

    return discrepancies

# Example usage
pdf_path1 = "path/to/old_version.pdf"
pdf_path2 = "path/to/new_version.pdf"
discrepancies = compare_pdfs(pdf_path1, pdf_path2)
print("Discrepancies found:", discrepancies)
